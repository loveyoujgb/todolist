{"ast":null,"code":"// src/modules/todos.js\nconst CREATE_TODO = \"CREATE_TODO\";\nconst READ_TODO = \"READ_TODO\"; // 머지?\n\nconst UPDATE_TODO = \"UPDATE_TODO\";\nconst DELETE_TODO = \"DELETE_TODO\";\nexport const createTodo = payload => {\n  return {\n    type: CREATE_TODO,\n    title: payload.title,\n    content: payload.content\n  };\n};\nexport const deleteTodo = payload => {\n  return {\n    type: DELETE_TODO,\n    id: payload\n  };\n};\nexport const updateTodo = payload => {\n  return {\n    type: UPDATE_TODO,\n    id: payload.id\n  };\n};\nexport const readTodo = payload => {\n  return {\n    type: READ_TODO,\n    title: payload.title,\n    content: payload.content\n  };\n}; // 초기 상태값\n\nconst initialState = []; // 리듀서\n\nconst todos = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(state);\n  console.log(action);\n\n  switch (action.type) {\n    case CREATE_TODO:\n      return [...state, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\n      {\n        id: Date.now(),\n        title: action.title,\n        content: action.content,\n        done: false\n      }];\n\n    case DELETE_TODO:\n      return state.filter(todolist => todolist.id !== action.id);\n    //객체 안에 있는 todolist 값이 변화하므로! {todolist: 안에 filter함수를 써야합니다.}\n    //반대로 말하면, filter은 배열을 반환합니다. 하지만 우리가 원하는 return값은 객체 입니다.! 그것을 기억하세요!\n\n    case UPDATE_TODO:\n      return state.map(todolist => {\n        if (todolist.id === action.id) {\n          // if (todolist.done === false) {\n          //   return (todolist.done = true);\n          // } else {\n          //   return (todolist.done = false);\n          // }\n          todolist.done = !todolist.done;\n        }\n\n        return todolist;\n      });\n\n    default:\n      return state;\n  }\n}; // const onRemove = (id) => {\n//   setList(list.filter((lists) => lists.id !== id));\n// };\n\n\nexport default todos;","map":{"version":3,"names":["CREATE_TODO","READ_TODO","UPDATE_TODO","DELETE_TODO","createTodo","payload","type","title","content","deleteTodo","id","updateTodo","readTodo","initialState","todos","state","action","console","log","Date","now","done","filter","todolist","map"],"sources":["C:/React/todolist/src/redux/modules/todos.js"],"sourcesContent":["// src/modules/todos.js\r\n\r\nconst CREATE_TODO = \"CREATE_TODO\";\r\nconst READ_TODO = \"READ_TODO\"; // 머지?\r\nconst UPDATE_TODO = \"UPDATE_TODO\";\r\nconst DELETE_TODO = \"DELETE_TODO\";\r\n\r\nexport const createTodo = (payload) => {\r\n  return {\r\n    type: CREATE_TODO,\r\n    title: payload.title,\r\n    content: payload.content,\r\n  };\r\n};\r\nexport const deleteTodo = (payload) => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    id: payload,\r\n  };\r\n};\r\nexport const updateTodo = (payload) => {\r\n  return {\r\n    type: UPDATE_TODO,\r\n    id: payload.id,\r\n  };\r\n};\r\nexport const readTodo = (payload) => {\r\n  return {\r\n    type: READ_TODO,\r\n    title: payload.title,\r\n    content: payload.content,\r\n  };\r\n};\r\n\r\n// 초기 상태값\r\nconst initialState = [];\r\n\r\n// 리듀서\r\nconst todos = (state = initialState, action) => {\r\n  console.log(state);\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case CREATE_TODO:\r\n      return [\r\n        ...state, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\r\n        {\r\n          id: Date.now(),\r\n          title: action.title,\r\n          content: action.content,\r\n          done: false,\r\n        },\r\n      ];\r\n    case DELETE_TODO:\r\n      return state.filter((todolist) => todolist.id !== action.id);\r\n    //객체 안에 있는 todolist 값이 변화하므로! {todolist: 안에 filter함수를 써야합니다.}\r\n    //반대로 말하면, filter은 배열을 반환합니다. 하지만 우리가 원하는 return값은 객체 입니다.! 그것을 기억하세요!\r\n    case UPDATE_TODO:\r\n      return state.map((todolist) => {\r\n        if (todolist.id === action.id) {\r\n          // if (todolist.done === false) {\r\n          //   return (todolist.done = true);\r\n          // } else {\r\n          //   return (todolist.done = false);\r\n          // }\r\n          todolist.done = !todolist.done;\r\n        }\r\n        return todolist;\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// const onRemove = (id) => {\r\n//   setList(list.filter((lists) => lists.id !== id));\r\n// };\r\n\r\nexport default todos;\r\n"],"mappings":"AAAA;AAEA,MAAMA,WAAW,GAAG,aAApB;AACA,MAAMC,SAAS,GAAG,WAAlB,C,CAA+B;;AAC/B,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEN,WADD;IAELO,KAAK,EAAEF,OAAO,CAACE,KAFV;IAGLC,OAAO,EAAEH,OAAO,CAACG;EAHZ,CAAP;AAKD,CANM;AAOP,OAAO,MAAMC,UAAU,GAAIJ,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEH,WADD;IAELO,EAAE,EAAEL;EAFC,CAAP;AAID,CALM;AAMP,OAAO,MAAMM,UAAU,GAAIN,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEJ,WADD;IAELQ,EAAE,EAAEL,OAAO,CAACK;EAFP,CAAP;AAID,CALM;AAMP,OAAO,MAAME,QAAQ,GAAIP,OAAD,IAAa;EACnC,OAAO;IACLC,IAAI,EAAEL,SADD;IAELM,KAAK,EAAEF,OAAO,CAACE,KAFV;IAGLC,OAAO,EAAEH,OAAO,CAACG;EAHZ,CAAP;AAKD,CANM,C,CAQP;;AACA,MAAMK,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,KAAK,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBF,YAAyB;EAAA,IAAXG,MAAW;EAC9CC,OAAO,CAACC,GAAR,CAAYH,KAAZ;EACAE,OAAO,CAACC,GAAR,CAAYF,MAAZ;;EACA,QAAQA,MAAM,CAACV,IAAf;IACE,KAAKN,WAAL;MACE,OAAO,CACL,GAAGe,KADE,EACK;MACV;QACEL,EAAE,EAAES,IAAI,CAACC,GAAL,EADN;QAEEb,KAAK,EAAES,MAAM,CAACT,KAFhB;QAGEC,OAAO,EAAEQ,MAAM,CAACR,OAHlB;QAIEa,IAAI,EAAE;MAJR,CAFK,CAAP;;IASF,KAAKlB,WAAL;MACE,OAAOY,KAAK,CAACO,MAAN,CAAcC,QAAD,IAAcA,QAAQ,CAACb,EAAT,KAAgBM,MAAM,CAACN,EAAlD,CAAP;IACF;IACA;;IACA,KAAKR,WAAL;MACE,OAAOa,KAAK,CAACS,GAAN,CAAWD,QAAD,IAAc;QAC7B,IAAIA,QAAQ,CAACb,EAAT,KAAgBM,MAAM,CAACN,EAA3B,EAA+B;UAC7B;UACA;UACA;UACA;UACA;UACAa,QAAQ,CAACF,IAAT,GAAgB,CAACE,QAAQ,CAACF,IAA1B;QACD;;QACD,OAAOE,QAAP;MACD,CAVM,CAAP;;IAWF;MACE,OAAOR,KAAP;EA5BJ;AA8BD,CAjCD,C,CAkCA;AACA;AACA;;;AAEA,eAAeD,KAAf"},"metadata":{},"sourceType":"module"}