{"ast":null,"code":"// src/modules/todos.js\nconst CREATE_TODO = \"CREATE_TODO\";\nconst READ_TODO = \"READ_TODO\"; // 머지?\n\nconst UPDATE_TODO = \"UPDATE_TODO\";\nconst DELETE_TODO = \"DELETE_TODO\";\nexport const createTodo = payload => {\n  return {\n    type: CREATE_TODO,\n    title: payload.title,\n    content: payload.content\n  };\n};\nexport const deleteTodo = payload => {\n  return {\n    type: DELETE_TODO,\n    id: payload\n  };\n};\nexport const updateTodo = payload => {\n  return {\n    type: UPDATE_TODO,\n    id: payload\n  };\n};\nexport const readTodo = payload => {\n  return {\n    type: READ_TODO,\n    title: payload.title,\n    content: payload.content\n  };\n}; // 초기 상태값\n\nconst initialState = {\n  todolist: [{\n    id: 0,\n    title: \"나는야 초기값\",\n    content: \"이거 지우는 방법은 무엇일깤ㅋㅋ\",\n    done: false\n  }]\n}; // 리듀서\n\nconst todos = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    todolist\n  } = state; // state.todolist를 자주 사용해야 하므로 줄이기 위해\n\n  console.log(todolist); // [{}] 다들어있옹..\n\n  switch (action.type) {\n    case CREATE_TODO:\n      return {\n        todolist: [...todolist, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\n        {\n          id: Date.now(),\n          title: action.title,\n          content: action.content,\n          done: false\n        }]\n      };\n\n    case UPDATE_TODO:\n      return {\n        todolist: []\n      };\n\n    case DELETE_TODO:\n      return {\n        todolist: todolist.filter(todolists => todolists.id !== action.id)\n      };\n    //객체 안에 있는 todolist 값이 변화하므로! {todolist: 안에 filter함수를 써야합니다.}\n    //반대로 말하면, filter은 배열을 반환합니다. 하지만 우리가 원하는 return값은 객체 입니다.! 그것을 기억하세요!\n\n    case DELETE_TODO:\n      return {\n        todolist: [...todolist, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\n        {\n          id: Date.now(),\n          title: action.title,\n          content: action.content,\n          done: true\n        }]\n      };\n    // const newList = [...list];\n    // newList.map((finish) => {\n    //   if (id === finish.id) {\n    //     if (finish.done === false) {\n    //       finish.done = true;\n    //     } else {\n    //       finish.done = false;\n    //     }\n    //   }\n    // });\n\n    default:\n      return state;\n  }\n}; // const onRemove = (id) => {\n//   setList(list.filter((lists) => lists.id !== id));\n// };\n\n\nexport default todos;","map":{"version":3,"names":["CREATE_TODO","READ_TODO","UPDATE_TODO","DELETE_TODO","createTodo","payload","type","title","content","deleteTodo","id","updateTodo","readTodo","initialState","todolist","done","todos","state","action","console","log","Date","now","filter","todolists"],"sources":["C:/React/todolist/src/redux/modules/todos.js"],"sourcesContent":["// src/modules/todos.js\r\n\r\nconst CREATE_TODO = \"CREATE_TODO\";\r\nconst READ_TODO = \"READ_TODO\"; // 머지?\r\nconst UPDATE_TODO = \"UPDATE_TODO\";\r\nconst DELETE_TODO = \"DELETE_TODO\";\r\n\r\nexport const createTodo = (payload) => {\r\n  return {\r\n    type: CREATE_TODO,\r\n    title: payload.title,\r\n    content: payload.content,\r\n  };\r\n};\r\nexport const deleteTodo = (payload) => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    id: payload,\r\n  };\r\n};\r\nexport const updateTodo = (payload) => {\r\n  return {\r\n    type: UPDATE_TODO,\r\n    id: payload,\r\n  };\r\n};\r\nexport const readTodo = (payload) => {\r\n  return {\r\n    type: READ_TODO,\r\n    title: payload.title,\r\n    content: payload.content,\r\n  };\r\n};\r\n\r\n// 초기 상태값\r\nconst initialState = {\r\n  todolist: [{ id: 0, title: \"나는야 초기값\", content: \"이거 지우는 방법은 무엇일깤ㅋㅋ\", done: false }],\r\n};\r\n\r\n// 리듀서\r\nconst todos = (state = initialState, action) => {\r\n  const { todolist } = state; // state.todolist를 자주 사용해야 하므로 줄이기 위해\r\n  console.log(todolist); // [{}] 다들어있옹..\r\n  switch (action.type) {\r\n    case CREATE_TODO:\r\n      return {\r\n        todolist: [\r\n          ...todolist, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\r\n          {\r\n            id: Date.now(),\r\n            title: action.title,\r\n            content: action.content,\r\n            done: false,\r\n          },\r\n        ],\r\n      };\r\n    case UPDATE_TODO:\r\n      return {\r\n        todolist: [],\r\n      };\r\n    case DELETE_TODO:\r\n      return { todolist: todolist.filter((todolists) => todolists.id !== action.id) };\r\n    //객체 안에 있는 todolist 값이 변화하므로! {todolist: 안에 filter함수를 써야합니다.}\r\n    //반대로 말하면, filter은 배열을 반환합니다. 하지만 우리가 원하는 return값은 객체 입니다.! 그것을 기억하세요!\r\n    case DELETE_TODO:\r\n      return {\r\n        todolist: [\r\n          ...todolist, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\r\n          {\r\n            id: Date.now(),\r\n            title: action.title,\r\n            content: action.content,\r\n            done: true,\r\n          },\r\n        ],\r\n      };\r\n\r\n    // const newList = [...list];\r\n    // newList.map((finish) => {\r\n    //   if (id === finish.id) {\r\n    //     if (finish.done === false) {\r\n    //       finish.done = true;\r\n    //     } else {\r\n    //       finish.done = false;\r\n    //     }\r\n    //   }\r\n    // });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// const onRemove = (id) => {\r\n//   setList(list.filter((lists) => lists.id !== id));\r\n// };\r\n\r\nexport default todos;\r\n"],"mappings":"AAAA;AAEA,MAAMA,WAAW,GAAG,aAApB;AACA,MAAMC,SAAS,GAAG,WAAlB,C,CAA+B;;AAC/B,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEN,WADD;IAELO,KAAK,EAAEF,OAAO,CAACE,KAFV;IAGLC,OAAO,EAAEH,OAAO,CAACG;EAHZ,CAAP;AAKD,CANM;AAOP,OAAO,MAAMC,UAAU,GAAIJ,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEH,WADD;IAELO,EAAE,EAAEL;EAFC,CAAP;AAID,CALM;AAMP,OAAO,MAAMM,UAAU,GAAIN,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEJ,WADD;IAELQ,EAAE,EAAEL;EAFC,CAAP;AAID,CALM;AAMP,OAAO,MAAMO,QAAQ,GAAIP,OAAD,IAAa;EACnC,OAAO;IACLC,IAAI,EAAEL,SADD;IAELM,KAAK,EAAEF,OAAO,CAACE,KAFV;IAGLC,OAAO,EAAEH,OAAO,CAACG;EAHZ,CAAP;AAKD,CANM,C,CAQP;;AACA,MAAMK,YAAY,GAAG;EACnBC,QAAQ,EAAE,CAAC;IAAEJ,EAAE,EAAE,CAAN;IAASH,KAAK,EAAE,SAAhB;IAA2BC,OAAO,EAAE,mBAApC;IAAyDO,IAAI,EAAE;EAA/D,CAAD;AADS,CAArB,C,CAIA;;AACA,MAAMC,KAAK,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBJ,YAAyB;EAAA,IAAXK,MAAW;EAC9C,MAAM;IAAEJ;EAAF,IAAeG,KAArB,CAD8C,CAClB;;EAC5BE,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAF8C,CAEvB;;EACvB,QAAQI,MAAM,CAACZ,IAAf;IACE,KAAKN,WAAL;MACE,OAAO;QACLc,QAAQ,EAAE,CACR,GAAGA,QADK,EACK;QACb;UACEJ,EAAE,EAAEW,IAAI,CAACC,GAAL,EADN;UAEEf,KAAK,EAAEW,MAAM,CAACX,KAFhB;UAGEC,OAAO,EAAEU,MAAM,CAACV,OAHlB;UAIEO,IAAI,EAAE;QAJR,CAFQ;MADL,CAAP;;IAWF,KAAKb,WAAL;MACE,OAAO;QACLY,QAAQ,EAAE;MADL,CAAP;;IAGF,KAAKX,WAAL;MACE,OAAO;QAAEW,QAAQ,EAAEA,QAAQ,CAACS,MAAT,CAAiBC,SAAD,IAAeA,SAAS,CAACd,EAAV,KAAiBQ,MAAM,CAACR,EAAvD;MAAZ,CAAP;IACF;IACA;;IACA,KAAKP,WAAL;MACE,OAAO;QACLW,QAAQ,EAAE,CACR,GAAGA,QADK,EACK;QACb;UACEJ,EAAE,EAAEW,IAAI,CAACC,GAAL,EADN;UAEEf,KAAK,EAAEW,MAAM,CAACX,KAFhB;UAGEC,OAAO,EAAEU,MAAM,CAACV,OAHlB;UAIEO,IAAI,EAAE;QAJR,CAFQ;MADL,CAAP;IAYF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA;MACE,OAAOE,KAAP;EA7CJ;AA+CD,CAlDD,C,CAmDA;AACA;AACA;;;AAEA,eAAeD,KAAf"},"metadata":{},"sourceType":"module"}