{"ast":null,"code":"// src/modules/todos.js\nconst CREATE_TODO = \"CREATE_TODO\";\nconst READ_TODO = \"READ_TODO\"; // 머지?\n\nconst UPDATE_TODO = \"UPDATE_TODO\";\nconst DELETE_TODO = \"DELETE_TODO\";\nexport const createTodo = payload => {\n  return {\n    type: CREATE_TODO,\n    title: payload.title,\n    content: payload.content\n  };\n};\nexport const deleteTodo = payload => {\n  return {\n    type: DELETE_TODO,\n    id: payload\n  };\n};\nexport const updateTodo = payload => {\n  return {\n    type: UPDATE_TODO,\n    id: payload.id\n  };\n};\nexport const readTodo = payload => {\n  return {\n    type: READ_TODO,\n    title: payload.title,\n    content: payload.content\n  };\n}; // 초기 상태값\n\nconst initialState = {\n  todolists: []\n}; // 리듀서\n\nconst todos = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    todolists\n  } = state; // state.todolist를 자주 사용해야 하므로 줄이기 위해\n\n  console.log(todolists); // [{}] 다들어있옹..\n\n  switch (action.type) {\n    case CREATE_TODO:\n      return {\n        todolists: [...todolists, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\n        {\n          id: Date.now(),\n          title: action.title,\n          content: action.content,\n          done: false\n        }]\n      };\n\n    case READ_TODO:\n      return {\n        todolists: []\n      };\n\n    case DELETE_TODO:\n      return {\n        todolists: todolists.filter(todolist => todolist.id !== action.id)\n      };\n    //객체 안에 있는 todolist 값이 변화하므로! {todolist: 안에 filter함수를 써야합니다.}\n    //반대로 말하면, filter은 배열을 반환합니다. 하지만 우리가 원하는 return값은 객체 입니다.! 그것을 기억하세요!\n\n    case UPDATE_TODO:\n      return todolists.map(todolist => {\n        if (todolist.id === action.id) {\n          todolist.done = !todolist.done;\n        }\n\n        return todolist;\n      });\n\n    case \"TOGGLE_VIEW\":\n      return state.map(item => {\n        if (item.id === action.id) {\n          return { ...item,\n            visible: !item.visible\n          };\n        } else {}\n\n        return item;\n      });\n    //       case DELETE_FAVORITE:\n    // return {\n    //   ...state,\n    //   items: state.items.map(item => {\n    //     if (item.id == id) {\n    //       return { ...item, isFavorite: false};\n    //     }\n    //     return item;\n    //   })\n    // }\n    // return {\n    //   ...state,\n    //   items: state.items.map(item => {\n    //     if (item.id == id) {\n    //       return { ...item, isFavorite: false};\n    //     }\n    //todolist 원래코드임!!!!!\n    // ...todolist, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\n    // todolist: todolist.map((todolists) => {\n    //   if (todolists.id === action.id) {\n    //     if (todolists.done === false) {\n    //       returntodolists.done = true;\n    //     } else {\n    //       todolists.done = false;\n    //     }\n    //   }\n    // }),\n\n    default:\n      return state;\n  }\n}; // const onRemove = (id) => {\n//   setList(list.filter((lists) => lists.id !== id));\n// };\n\n\nexport default todos;","map":{"version":3,"names":["CREATE_TODO","READ_TODO","UPDATE_TODO","DELETE_TODO","createTodo","payload","type","title","content","deleteTodo","id","updateTodo","readTodo","initialState","todolists","todos","state","action","console","log","Date","now","done","filter","todolist","map","item","visible"],"sources":["C:/React/todolist/src/redux/modules/todos.js"],"sourcesContent":["// src/modules/todos.js\r\n\r\nconst CREATE_TODO = \"CREATE_TODO\";\r\nconst READ_TODO = \"READ_TODO\"; // 머지?\r\nconst UPDATE_TODO = \"UPDATE_TODO\";\r\nconst DELETE_TODO = \"DELETE_TODO\";\r\n\r\nexport const createTodo = (payload) => {\r\n  return {\r\n    type: CREATE_TODO,\r\n    title: payload.title,\r\n    content: payload.content,\r\n  };\r\n};\r\nexport const deleteTodo = (payload) => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    id: payload,\r\n  };\r\n};\r\nexport const updateTodo = (payload) => {\r\n  return {\r\n    type: UPDATE_TODO,\r\n    id: payload.id,\r\n  };\r\n};\r\nexport const readTodo = (payload) => {\r\n  return {\r\n    type: READ_TODO,\r\n    title: payload.title,\r\n    content: payload.content,\r\n  };\r\n};\r\n\r\n// 초기 상태값\r\nconst initialState = {\r\n  todolists: [],\r\n};\r\n\r\n// 리듀서\r\nconst todos = (state = initialState, action) => {\r\n  const { todolists } = state; // state.todolist를 자주 사용해야 하므로 줄이기 위해\r\n  console.log(todolists); // [{}] 다들어있옹..\r\n  switch (action.type) {\r\n    case CREATE_TODO:\r\n      return {\r\n        todolists: [\r\n          ...todolists, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\r\n          {\r\n            id: Date.now(),\r\n            title: action.title,\r\n            content: action.content,\r\n            done: false,\r\n          },\r\n        ],\r\n      };\r\n    case READ_TODO:\r\n      return {\r\n        todolists: [],\r\n      };\r\n    case DELETE_TODO:\r\n      return { todolists: todolists.filter((todolist) => todolist.id !== action.id) };\r\n    //객체 안에 있는 todolist 값이 변화하므로! {todolist: 안에 filter함수를 써야합니다.}\r\n    //반대로 말하면, filter은 배열을 반환합니다. 하지만 우리가 원하는 return값은 객체 입니다.! 그것을 기억하세요!\r\n    case UPDATE_TODO:\r\n      return todolists.map((todolist) => {\r\n        if (todolist.id === action.id) {\r\n          todolist.done = !todolist.done;\r\n        }\r\n        return todolist;\r\n      });\r\n    case \"TOGGLE_VIEW\":\r\n      return state.map((item) => {\r\n        if (item.id === action.id) {\r\n          return {\r\n            ...item,\r\n            visible: !item.visible,\r\n          };\r\n        } else {\r\n        }\r\n\r\n        return item;\r\n      });\r\n\r\n    //       case DELETE_FAVORITE:\r\n    // return {\r\n    //   ...state,\r\n    //   items: state.items.map(item => {\r\n    //     if (item.id == id) {\r\n    //       return { ...item, isFavorite: false};\r\n    //     }\r\n    //     return item;\r\n    //   })\r\n    // }\r\n    // return {\r\n    //   ...state,\r\n    //   items: state.items.map(item => {\r\n    //     if (item.id == id) {\r\n    //       return { ...item, isFavorite: false};\r\n    //     }\r\n\r\n    //todolist 원래코드임!!!!!\r\n    // ...todolist, //state안에 있는 배열은 불변성을 지켜주기 위해... 을 해야한다!\r\n    // todolist: todolist.map((todolists) => {\r\n    //   if (todolists.id === action.id) {\r\n    //     if (todolists.done === false) {\r\n    //       returntodolists.done = true;\r\n    //     } else {\r\n    //       todolists.done = false;\r\n    //     }\r\n    //   }\r\n    // }),\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// const onRemove = (id) => {\r\n//   setList(list.filter((lists) => lists.id !== id));\r\n// };\r\n\r\nexport default todos;\r\n"],"mappings":"AAAA;AAEA,MAAMA,WAAW,GAAG,aAApB;AACA,MAAMC,SAAS,GAAG,WAAlB,C,CAA+B;;AAC/B,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEN,WADD;IAELO,KAAK,EAAEF,OAAO,CAACE,KAFV;IAGLC,OAAO,EAAEH,OAAO,CAACG;EAHZ,CAAP;AAKD,CANM;AAOP,OAAO,MAAMC,UAAU,GAAIJ,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEH,WADD;IAELO,EAAE,EAAEL;EAFC,CAAP;AAID,CALM;AAMP,OAAO,MAAMM,UAAU,GAAIN,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEJ,WADD;IAELQ,EAAE,EAAEL,OAAO,CAACK;EAFP,CAAP;AAID,CALM;AAMP,OAAO,MAAME,QAAQ,GAAIP,OAAD,IAAa;EACnC,OAAO;IACLC,IAAI,EAAEL,SADD;IAELM,KAAK,EAAEF,OAAO,CAACE,KAFV;IAGLC,OAAO,EAAEH,OAAO,CAACG;EAHZ,CAAP;AAKD,CANM,C,CAQP;;AACA,MAAMK,YAAY,GAAG;EACnBC,SAAS,EAAE;AADQ,CAArB,C,CAIA;;AACA,MAAMC,KAAK,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBH,YAAyB;EAAA,IAAXI,MAAW;EAC9C,MAAM;IAAEH;EAAF,IAAgBE,KAAtB,CAD8C,CACjB;;EAC7BE,OAAO,CAACC,GAAR,CAAYL,SAAZ,EAF8C,CAEtB;;EACxB,QAAQG,MAAM,CAACX,IAAf;IACE,KAAKN,WAAL;MACE,OAAO;QACLc,SAAS,EAAE,CACT,GAAGA,SADM,EACK;QACd;UACEJ,EAAE,EAAEU,IAAI,CAACC,GAAL,EADN;UAEEd,KAAK,EAAEU,MAAM,CAACV,KAFhB;UAGEC,OAAO,EAAES,MAAM,CAACT,OAHlB;UAIEc,IAAI,EAAE;QAJR,CAFS;MADN,CAAP;;IAWF,KAAKrB,SAAL;MACE,OAAO;QACLa,SAAS,EAAE;MADN,CAAP;;IAGF,KAAKX,WAAL;MACE,OAAO;QAAEW,SAAS,EAAEA,SAAS,CAACS,MAAV,CAAkBC,QAAD,IAAcA,QAAQ,CAACd,EAAT,KAAgBO,MAAM,CAACP,EAAtD;MAAb,CAAP;IACF;IACA;;IACA,KAAKR,WAAL;MACE,OAAOY,SAAS,CAACW,GAAV,CAAeD,QAAD,IAAc;QACjC,IAAIA,QAAQ,CAACd,EAAT,KAAgBO,MAAM,CAACP,EAA3B,EAA+B;UAC7Bc,QAAQ,CAACF,IAAT,GAAgB,CAACE,QAAQ,CAACF,IAA1B;QACD;;QACD,OAAOE,QAAP;MACD,CALM,CAAP;;IAMF,KAAK,aAAL;MACE,OAAOR,KAAK,CAACS,GAAN,CAAWC,IAAD,IAAU;QACzB,IAAIA,IAAI,CAAChB,EAAL,KAAYO,MAAM,CAACP,EAAvB,EAA2B;UACzB,OAAO,EACL,GAAGgB,IADE;YAELC,OAAO,EAAE,CAACD,IAAI,CAACC;UAFV,CAAP;QAID,CALD,MAKO,CACN;;QAED,OAAOD,IAAP;MACD,CAVM,CAAP;IAYF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA;MACE,OAAOV,KAAP;EAtEJ;AAwED,CA3ED,C,CA4EA;AACA;AACA;;;AAEA,eAAeD,KAAf"},"metadata":{},"sourceType":"module"}